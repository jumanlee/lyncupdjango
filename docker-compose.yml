services:
  django:
    # build: .
    image: jumanlee/lyncup-django-repo:latest
    container_name: django_app
    # command: daphne -b 0.0.0.0 -p 8080 lyncup.asgi:application
    #use below command so that django admin can be served when nginx is used.


    # command: >
    #   sh -c "
    #     python manage.py collectstatic --noinput &&
    #     daphne -b 0.0.0.0 -p 8080 lyncup.asgi:application
    #   "

    #silenced healthcheck message, only supress sucessful message, not error messages
    command: >
      sh -c "
        python manage.py collectstatic --noinput &&
        daphne -b 0.0.0.0 -p 8080 --access-log /dev/null lyncup.asgi:application
      "


    #the following volume means "Take the current host directory (that . = current folder) and mount it inside the container at /usr/src/app.", but this causes problem if deployed on EC2 as on local machine, . means the app source code (with manage.py, lyncup/, etc.). But on EC2, when I clone or pull your repo, that . folder is usually empty or missing most code unless I copied it up manually. So when Docker runs this: .:/usr/src/app, it means replace everything at /usr/src/app inside the container with whatever is in the EC2 host's current folder (.), If that EC2 folder is empty = you wipe out the code inside the image. Therefore when deployed on EC2, must remove the following line, commented out! We're already pulling from docker hub, the image already has the code.
    # volumes:
    #   - .:/usr/src/app

    #we cannot expose 8080 to the world, therefore must include 127.0.0.1
    ports:
      - "127.0.0.1:8080:8080"
    depends_on:
      # - postgres
      # - redis
      # - migrate  #ensure migrations run first
      migrate:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env

    restart: always


    #can uncomment since we have .env file above
    environment:
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: postgres
      DB_PORT: ${DB_PORT}
      SECRET_KEY: ${SECRET_KEY}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    healthcheck:
      # test: ["CMD", "curl", "-f", "http://localhost:8080"]
      # Healthcheck must spoof Host header as "lyncup.app" because Django checks the HTTP Host header against ALLOWED_HOSTS.
      # By default, curl sends "Host: localhost", which Django rejects with a DisallowedHost error since "localhost" is not in ALLOWED_HOSTS.
      # This spoofed header allows the container-internal curl to hit Django without triggering that error.
      test: ["CMD", "curl", "-H", "Host: lyncup.app", "-f", "http://localhost:8080"]
      interval: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"


# The migrate service runs once, applies migrations, and exits.
# The django service waits until migrate finishes before starting.
# When restart the django container, migrations won't run again because the migrate service isn’t restarted
# Caution! Dangerous error which could wipe out Organisation values and others: migrate automatically wipes out Organisation field value on AppUser due to (python manage.py loaddata lyncup/fixtures/initial_data.json || echo "No fixture" or data already loaded"). Therefore, I've commented out the loaddata command, which I think is better executed manually when needed.

  migrate:
    # build: .
    image: jumanlee/lyncup-django-repo:latest
    container_name: django_migrations
    # command: python manage.py migrate --noinput
    command: >
      sh -c "
        python manage.py migrate --noinput &&
        python manage.py collectstatic --noinput
      "

    restart: "no"

    ##I could include makemigrations here, but it would run every time the container starts, which is not ideal, as sometimes I may make some changes but not yet final/not yet ready to be migrated. Nevertheless, putting this here so to remind that this is an option.
    # command: >
    #   sh -c "
    #     python manage.py makemigrations --noinput &&
    #     python manage.py migrate --noinput
    #   "


    ## Runs migrations, then creates a superuser
    # command: >
    #   sh -c '
    #     python manage.py migrate --noinput &&
    #     (python manage.py loaddata lyncup/fixtures/initial_data.json || 
    #     echo "No fixture or data already loaded")
    #   '
    # depends_on:
    #   - postgres
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DB_HOST: postgres
      DB_PORT: ${DB_PORT}

      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}

      REDIS_HOST: redis
      REDIS_PORT: 6379

  postgres:
    image: postgres:16
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}

    volumes:
      # - postgres_data:/var/lib/postgresql/data
      - /data/postgres:/var/lib/postgresql/data   # ← NEW — on EBS
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      interval: 35s
      retries: 5
      start_period: 10s
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7
    container_name: redis_service
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  celery:
    # build: .
    image: jumanlee/lyncup-django-repo:latest
    container_name: celery_worker
    #disable noisy logging during production
    # command: celery -A lyncup worker --loglevel=info
    command: celery -A lyncup worker --loglevel=warning

    restart: always
    env_file:
      - .env
    # volumes:
    #   - .:/usr/src/app
    # depends_on:
    #   - django
    #   - redis
    #   - postgres
    depends_on:
      django:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

    environment:
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: postgres
      DB_PORT: ${DB_PORT}
      SECRET_KEY: ${SECRET_KEY}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  celerybeat:
    # build: .
    image: jumanlee/lyncup-django-repo:latest
    container_name: celery_beat

    #disable noisy logging during production
    # command: celery -A lyncup beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler

    command: celery -A lyncup beat --loglevel=warning --scheduler django_celery_beat.schedulers:DatabaseScheduler

    restart: always
    env_file:
      - .env
    # volumes:
    #   - .:/usr/src/app
    # depends_on:
    #   - django
    #   - redis
    #   - postgres
    depends_on:
      django:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: postgres
      DB_PORT: ${DB_PORT}
      SECRET_KEY: ${SECRET_KEY}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

# volumes:
#   postgres_data:
